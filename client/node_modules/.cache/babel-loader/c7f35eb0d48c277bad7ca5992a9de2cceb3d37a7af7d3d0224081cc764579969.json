{"ast":null,"code":"var _jsxFileName = \"/Users/gonzalosoto/ola-learn/client/src/TopicContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, createContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\n\n// axios.defaults.baseURL = 'https://learn-anything-b61f2394c70a.herokuapp.com/';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.baseURL = 'http://localhost:8000';\naxios.defaults.withCredentials = true;\nconst TopicContext = /*#__PURE__*/createContext({});\nexport const TopicProvider = ({\n  children\n}) => {\n  _s();\n  // V2 Onwards\n  const [isLoading, setIsLoading] = useState(false);\n  const [courseData, setCourseData] = useState(null);\n  const [keyTerms, setKeyTerms] = useState(null);\n  const [suggestedQuestions, setSuggestedQuestions] = useState(null);\n  const [relevantQuestions, setRelevantQuestions] = useState(null);\n  const [addedSlide, setAddedSlide] = useState(null);\n  const [indexBeforeAdd, setIndexBeforeAdd] = useState(null);\n  const navigate = useNavigate();\n  const createCourse = async topic => {\n    try {\n      var _res$data, _res$data2, _res$data3;\n      console.log('Sent course to DB');\n      const res = await axios.post('/create_course', {\n        topic\n      });\n      console.log(res === null || res === void 0 ? void 0 : res.data);\n      setCourseData(res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.main);\n      setKeyTerms(res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.keyTerms);\n      setSuggestedQuestions(res === null || res === void 0 ? void 0 : (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : _res$data3.suggestedQuestions);\n      navigate('/deep-dive');\n    } catch (error) {\n      console.log('Error creating course:', error);\n    }\n  };\n  const getRelevantQuestions = async paragraph => {\n    try {\n      console.log('Sent relevant questions to DB');\n      const res = await axios.post('/relevant_questions', {\n        paragraph\n      });\n      console.log(res === null || res === void 0 ? void 0 : res.data);\n      setRelevantQuestions(res === null || res === void 0 ? void 0 : res.data);\n    } catch (error) {\n      console.log('Error getting relevant questions:', error);\n    }\n  };\n  const addSlide = async question => {\n    try {\n      console.log('Sent question for slide to DB');\n      const res = await axios.post('/add_slide', {\n        question\n      });\n      console.log(res === null || res === void 0 ? void 0 : res.data);\n      setAddedSlide(res === null || res === void 0 ? void 0 : res.data);\n      if (courseData && courseData.topics) {\n        const updatedTopics = [...courseData.topics];\n        updatedTopics.splice(indexBeforeAdd + 1, 0, res.data);\n        setCourseData({\n          ...courseData,\n          topics: updatedTopics\n        });\n      }\n    } catch (error) {\n      console.log('Error adding slide:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TopicContext.Provider, {\n    value: {\n      isLoading,\n      setIsLoading,\n      showSidesheet,\n      setShowSidesheet,\n      courseData,\n      setCourseData,\n      keyTerms,\n      setKeyTerms,\n      suggestedQuestions,\n      setSuggestedQuestions,\n      createCourse,\n      relevantQuestions,\n      setRelevantQuestions,\n      getRelevantQuestions,\n      addSlide,\n      indexBeforeAdd,\n      setIndexBeforeAdd\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(TopicProvider, \"P3lNAP/28NlfPU2Ig7D0TaO9Jis=\", false, function () {\n  return [useNavigate];\n});\n_c = TopicProvider;\nexport default TopicContext;\n\n// const [topic, setTopic] = useState('');\n// const [briefSummary, setBriefSummary] = useState({});\n// const [activeTopic, setActiveTopic] = useState('');\n// const [funLinks, setFunLinks] = useState([]);\n// const [learningPlan, setLearningPlan] = useState([]);\n// const [deepdiveData, setDeepdiveData] = useState([]);\n// const [quizData, setQuizData] = useState([]);\n// const [recentTopics, setRecentTopics] = useState([]);\n//\n// const [showSidesheet, setShowSidesheet] = useState(false);\n\n// const searchTopic = async (paragraph) => {\n//   try {\n//     console.log('Sent search to DB');\n//     setIsLoading(true);\n//     const res = await axios.post('/search_concept', { paragraph });\n//     console.log(res?.data);\n//     setBriefSummary(res?.data?.data);\n//     setActiveTopic(res?.data?.data?.topics?.[0]?.name);\n//     setFunLinks(res?.data?.metaphorResults);\n//   } catch (error) {\n//     console.log(error);\n//   } finally {\n//     setIsLoading(false);\n//   }\n// };\n\n// const deepdiveIntoTopic = async (topic, activeTopic) => {\n//   try {\n//     console.log('Sent deepdive to DB');\n//     setIsLoading(true);\n//     const res = await axios.post('/deepdive_topic', { topic, activeTopic });\n//     console.log(res?.data?.choices?.[0]?.message?.content);\n//     setDeepdiveData(JSON.parse(res?.data?.choices?.[0]?.message?.content));\n//     navigate('/topic-deepdive');\n//   } catch (error) {\n//     console.log(error);\n//   } finally {\n//     setIsLoading(false);\n//   }\n// };\n\n// const quizAboutTopic = async (topic, activeTopic) => {\n//   try {\n//     console.log('Sent deepdive to DB');\n//     setIsLoading(true);\n//     const res = await axios.post('/quiz_topic', { topic, activeTopic });\n//     console.log(res?.data?.choices?.[0]?.message?.content);\n//     setQuizData(JSON.parse(res?.data?.choices?.[0]?.message?.content));\n//     navigate('/topic-quiz');\n//   } catch (error) {\n//     console.log(error);\n//   } finally {\n//     setIsLoading(false);\n//   }\n// };\n\n// useEffect(() => {\n//   const getRecentTopics = async () => {\n//     try {\n//       const res = await axios.get('/recent_topics');\n//       setRecentTopics(res.data);\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n//   getRecentTopics();\n// }, []);\n\n// const getKeywords = async (paragraph) => {\n//   try {\n//     const res = await axios.post('/extract_keywords', { paragraph });\n//     console.log(res.data);\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\nvar _c;\n$RefreshReg$(_c, \"TopicProvider\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useNavigate","axios","jsxDEV","_jsxDEV","defaults","baseURL","withCredentials","TopicContext","TopicProvider","children","_s","isLoading","setIsLoading","courseData","setCourseData","keyTerms","setKeyTerms","suggestedQuestions","setSuggestedQuestions","relevantQuestions","setRelevantQuestions","addedSlide","setAddedSlide","indexBeforeAdd","setIndexBeforeAdd","navigate","createCourse","topic","_res$data","_res$data2","_res$data3","console","log","res","post","data","main","error","getRelevantQuestions","paragraph","addSlide","question","topics","updatedTopics","splice","Provider","value","showSidesheet","setShowSidesheet","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gonzalosoto/ola-learn/client/src/TopicContext.jsx"],"sourcesContent":["import React, { useState, useEffect, createContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\n\n// axios.defaults.baseURL = 'https://learn-anything-b61f2394c70a.herokuapp.com/';\naxios.defaults.baseURL = 'http://localhost:8000';\naxios.defaults.withCredentials = true;\n\nconst TopicContext = createContext({});\n\nexport const TopicProvider = ({ children }) => {\n  // V2 Onwards\n  const [isLoading, setIsLoading] = useState(false);\n  const [courseData, setCourseData] = useState(null);\n  const [keyTerms, setKeyTerms] = useState(null);\n  const [suggestedQuestions, setSuggestedQuestions] = useState(null);\n  const [relevantQuestions, setRelevantQuestions] = useState(null);\n  const [addedSlide, setAddedSlide] = useState(null);\n  const [indexBeforeAdd, setIndexBeforeAdd] = useState(null);\n\n  const navigate = useNavigate();\n\n  const createCourse = async (topic) => {\n    try {\n      console.log('Sent course to DB');\n      const res = await axios.post('/create_course', { topic });\n      console.log(res?.data);\n      setCourseData(res?.data?.main);\n      setKeyTerms(res?.data?.keyTerms);\n      setSuggestedQuestions(res?.data?.suggestedQuestions);\n      navigate('/deep-dive');\n    } catch (error) {\n      console.log('Error creating course:', error);\n    }\n  };\n\n  const getRelevantQuestions = async (paragraph) => {\n    try {\n      console.log('Sent relevant questions to DB');\n      const res = await axios.post('/relevant_questions', { paragraph });\n      console.log(res?.data);\n      setRelevantQuestions(res?.data);\n    } catch (error) {\n      console.log('Error getting relevant questions:', error);\n    }\n  };\n\n  const addSlide = async (question) => {\n    try {\n      console.log('Sent question for slide to DB');\n      const res = await axios.post('/add_slide', { question });\n      console.log(res?.data);\n      setAddedSlide(res?.data);\n\n      if (courseData && courseData.topics) {\n        const updatedTopics = [...courseData.topics];\n        updatedTopics.splice(indexBeforeAdd + 1, 0, res.data);\n        setCourseData({ ...courseData, topics: updatedTopics });\n      }\n    } catch (error) {\n      console.log('Error adding slide:', error);\n    }\n  };\n\n  return (\n    <TopicContext.Provider\n      value={{\n        isLoading,\n        setIsLoading,\n        showSidesheet,\n        setShowSidesheet,\n        courseData,\n        setCourseData,\n        keyTerms,\n        setKeyTerms,\n        suggestedQuestions,\n        setSuggestedQuestions,\n        createCourse,\n        relevantQuestions,\n        setRelevantQuestions,\n        getRelevantQuestions,\n        addSlide,\n        indexBeforeAdd,\n        setIndexBeforeAdd,\n      }}\n    >\n      {children}\n    </TopicContext.Provider>\n  );\n};\n\nexport default TopicContext;\n\n// const [topic, setTopic] = useState('');\n// const [briefSummary, setBriefSummary] = useState({});\n// const [activeTopic, setActiveTopic] = useState('');\n// const [funLinks, setFunLinks] = useState([]);\n// const [learningPlan, setLearningPlan] = useState([]);\n// const [deepdiveData, setDeepdiveData] = useState([]);\n// const [quizData, setQuizData] = useState([]);\n// const [recentTopics, setRecentTopics] = useState([]);\n//\n// const [showSidesheet, setShowSidesheet] = useState(false);\n\n// const searchTopic = async (paragraph) => {\n//   try {\n//     console.log('Sent search to DB');\n//     setIsLoading(true);\n//     const res = await axios.post('/search_concept', { paragraph });\n//     console.log(res?.data);\n//     setBriefSummary(res?.data?.data);\n//     setActiveTopic(res?.data?.data?.topics?.[0]?.name);\n//     setFunLinks(res?.data?.metaphorResults);\n//   } catch (error) {\n//     console.log(error);\n//   } finally {\n//     setIsLoading(false);\n//   }\n// };\n\n// const deepdiveIntoTopic = async (topic, activeTopic) => {\n//   try {\n//     console.log('Sent deepdive to DB');\n//     setIsLoading(true);\n//     const res = await axios.post('/deepdive_topic', { topic, activeTopic });\n//     console.log(res?.data?.choices?.[0]?.message?.content);\n//     setDeepdiveData(JSON.parse(res?.data?.choices?.[0]?.message?.content));\n//     navigate('/topic-deepdive');\n//   } catch (error) {\n//     console.log(error);\n//   } finally {\n//     setIsLoading(false);\n//   }\n// };\n\n// const quizAboutTopic = async (topic, activeTopic) => {\n//   try {\n//     console.log('Sent deepdive to DB');\n//     setIsLoading(true);\n//     const res = await axios.post('/quiz_topic', { topic, activeTopic });\n//     console.log(res?.data?.choices?.[0]?.message?.content);\n//     setQuizData(JSON.parse(res?.data?.choices?.[0]?.message?.content));\n//     navigate('/topic-quiz');\n//   } catch (error) {\n//     console.log(error);\n//   } finally {\n//     setIsLoading(false);\n//   }\n// };\n\n// useEffect(() => {\n//   const getRecentTopics = async () => {\n//     try {\n//       const res = await axios.get('/recent_topics');\n//       setRecentTopics(res.data);\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n//   getRecentTopics();\n// }, []);\n\n// const getKeywords = async (paragraph) => {\n//   try {\n//     const res = await axios.post('/extract_keywords', { paragraph });\n//     console.log(res.data);\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}